"""
Django settings for main project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import glob

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
STATIC_DIR = os.path.join(BASE_DIR, 'static')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-+y=2iljwg8vnctqwixxxf_hif4ql3ti8gp9#_58-flis6f*51j'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'apps.user',
    'apps.home',
    'apps.dashboard',
    'apps.router',
    'apps.hotspot_router',
    'apps.config',
    'apps.seller',
    'apps.reseller',
    'apps.sms',
    'apps.iptv',
    'apps.package',
    'apps.hotspot_package',
    'apps.ctoken',
    'apps.hotspot_customer',
    'apps.hotspot_card',
    'apps.pppoe_customer',
    'apps.payment',
    'apps.reports',
    'channels',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'system.middleware.user_host_middleware.UserHostMiddleware',
    'system.middleware.custom_auth.CustomAuthMiddleware',
    'system.middleware.user_host_middleware.XFrameOptionsMiddleware',
    'system.middleware.media_auth.MediaAuthMiddleware',
]

ROOT_URLCONF = 'main.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'system.context_processor.global_context_processor',

            ],
        },
    },
]
WSGI_APPLICATION = 'main.wsgi.application'

ASGI_APPLICATION = 'main.asgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT'),
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        },
    }
}

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer"
    }
}

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

NO_AUTH = ['login', 'home', 'sendotp', 'forgot_pass', 'reset_password', 'submit_otp', 'live', 'generate_token_api',
           'customer_create_or_otp_send', 'validate_customer_otp', 'hotspot_package_bkash_payment_checkout',
           'bkash_payment_success','hotspot_login','hotspot_user_otp_validate','hotspot_customer_mac_update','hotspot_dashboard']

AUTH_USER_MODEL = 'user.Users'

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Dhaka'

USE_I18N = True

USE_L10N = True

USE_TZ = False
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATICFILES_DIRS = [
    BASE_DIR / 'static',  # Replace 'static' with the path to your static files directory
]

STATIC_URL = '/static/'

STATIC_ROOT = BASE_DIR / 'staticfiles'  # Replace 'staticfiles' with the desired directory path

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_REDIS_TASK_KEY_PREFIX = 'my_custom_prefix'

CELERY_TIMEZONE = "Asia/Dhaka"
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60

import logging
import datetime

log_filename = f"./error/{datetime.date.today()}.log"
logging.basicConfig(filename=log_filename, level=logging.ERROR,
                    format='%(asctime)s:%(levelname)s:%(message)s')

# Define a logger object

logger = logging.getLogger(__name__)

error_handler = logging.FileHandler(f"./error/errors_{datetime.date.today()}.log")
error_handler.setLevel(logging.ERROR)
error_formatter = logging.Formatter('%(asctime)s:%(levelname)s:%(message)s')
error_handler.setFormatter(error_formatter)
logger.addHandler(error_handler)

